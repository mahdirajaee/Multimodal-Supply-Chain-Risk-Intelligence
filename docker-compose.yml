version: '3.8'

services:
  # Main API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: supply-chain-api
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/supply_chain_risk}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - API_KEY=${API_KEY:-dev-key-12345}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-67890}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
    volumes:
      - ./data:/app/data:rw
      - ./checkpoints:/app/checkpoints:rw
      - ./logs:/app/logs:rw
      - ./backups:/app/backups:rw
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - supply-chain-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Dashboard Service
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: supply-chain-dashboard
    ports:
      - "${DASHBOARD_PORT:-8501}:8501"
    environment:
      - PYTHONPATH=/app
      - API_BASE_URL=http://api:8000
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/supply_chain_risk}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
    volumes:
      - ./data:/app/data:ro
      - ./logs:/app/logs:rw
    depends_on:
      - api
    restart: unless-stopped
    command: ["streamlit", "run", "scripts/enhanced_dashboard.py", "--server.port", "8501", "--server.address", "0.0.0.0"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - supply-chain-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: supply-chain-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-supply_chain_risk}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
      - ./backups:/backups:rw
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-supply_chain_risk}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - supply-chain-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: supply-chain-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - supply-chain-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: supply-chain-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    depends_on:
      - api
    networks:
      - supply-chain-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana-oss:9.2.0
    container_name: supply-chain-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/dashboard_configs:/var/lib/grafana/dashboards:ro
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - supply-chain-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.23-alpine
    container_name: supply-chain-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - dashboard
      - grafana
    restart: unless-stopped
    networks:
      - supply-chain-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backup Service (runs periodically)
  backup:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: supply-chain-backup
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/supply_chain_risk}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - ./backups:/app/backups:rw
      - postgres_data:/var/lib/postgresql/data:ro
      - redis_data:/redis_data:ro
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    command: ["python", "scripts/backup_service.py"]
    networks:
      - supply-chain-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  supply-chain-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
